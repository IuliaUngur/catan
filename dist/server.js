"use strict";
var express = require('express');
var path = require('path');
var mongoose = require('mongoose');
var bodyParser = require('body-parser');
mongoose.connect('mongodb://iuli_ungur:pattycut94@ds025419.mlab.com:25419/sabotor');
var port = process.env.PORT || 3000;
var app = express();
var database = mongoose.connection;
database.on('error', console.error.bind(console, 'connection error:'));
database.once('open', function () {
    console.log('Database connection established');
    var userSchema = new mongoose.Schema({
        userName: { type: String, unique: true, required: true },
        password: { type: String, required: true },
        name: { type: String, required: true },
        authToken: { type: String }
    });
    var User = mongoose.model('User', userSchema);
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({ extended: true }));
    // Static routes
    app.use('/app', express.static(path.resolve(__dirname, 'app')));
    app.use('/libs', express.static(path.resolve(__dirname, 'libs')));
    app.use('/images', express.static(path.resolve(__dirname, 'images')));
    app.use('/css', express.static(path.resolve(__dirname, 'css')));
    // Start server
    var server = app.listen(port, function () {
        var host = server.address().address;
        var port = server.address().port;
        console.log('This express app is listening on port:' + port);
    });
    // Dynamic routes
    app.get('/*', function (req, res) {
        res.sendFile(path.resolve(__dirname, 'index.html'));
    });
    function guidGenerator() {
        var S4 = function () {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        };
        return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
    }
    // Authorization Service
    app.post('/api/authorization/registerUser', function (req, res) {
        console.log("RegisterUser: ");
        console.dir(req.body);
        var newUser = new User({
            userName: req.body.userName,
            password: req.body.password,
            name: req.body.name,
            authToken: ""
        });
        newUser.save(function (err) {
            if (err) {
                res.json({ errorMessage: err });
            }
            else {
                res.json({ success: true });
            }
        });
    });
    app.post('/api/authorization/login', function (req, res) {
        console.log("Login request: ", req.body);
        var user = {};
        User.findOne({
            userName: req.body.userName,
            password: req.body.password
        }, function (err, raw) {
            console.log("Login request: findOne() ", err, raw);
            if (err) {
                res.json({ errorMessage: err });
            }
            else {
                if (raw != null) {
                    raw['authToken'] = guidGenerator();
                    raw.save(function (err, raw) {
                        if (err) {
                            res.json({ errorMessage: err });
                        }
                        else {
                            res.json({ authToken: raw['authToken'] });
                        }
                    });
                }
                else {
                    res.json({ errorMessage: "User or password invalid!" });
                }
            }
        });
    });
    app.post('/api/authorization/logout', function (req, res) {
        console.log("Logout request: ", req.body);
        User.findOne({
            authToken: req.body.authToken
        }, function (err, raw) {
            console.log("Logout request: findOne() ", err, raw);
            if (err) {
                res.json({ errorMessage: err });
            }
            else {
                if (raw != null) {
                    raw['authToken'] = undefined;
                    raw.save(function (err, raw) {
                        if (err) {
                            res.json({ errorMessage: err });
                        }
                        else {
                            res.json({ success: true });
                        }
                    });
                }
                else {
                    res.json({ errorMessage: "Invalid or expired token!" });
                }
            }
        });
    });
    // GameLobbyService 
    app.get('/api/game-lobby/', function (req, res) {
        console.log('get game-lobby', req.body);
        res.json('test');
    });
});

//# sourceMappingURL=data:application/json;base64,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RyxTQUFTLENBQUM7b0JBQzdCLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBUyxHQUFHLEVBQUUsR0FBRzt3QkFDdEIsRUFBRSxDQUFBLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzs0QkFDTCxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUMsWUFBWSxFQUFFLEdBQUcsRUFBQyxDQUFDLENBQUM7d0JBQ2xDLENBQUM7d0JBQ0QsSUFBSSxDQUFDLENBQUM7NEJBQ0YsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO3dCQUM5QixDQUFDO29CQUNMLENBQUMsQ0FBQyxDQUFDO2dCQUNQLENBQUM7Z0JBQ0QsSUFBSSxDQUFDLENBQUM7b0JBQ0YsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFDLFlBQVksRUFBRSwyQkFBMkIsRUFBQyxDQUFDLENBQUM7Z0JBQzFELENBQUM7WUFDTCxDQUFDO1FBQ0wsQ0FBQyxDQUNKLENBQUM7SUFDTixDQUFDLENBQUMsQ0FBQztJQUVGLG9CQUFvQjtJQUVwQixHQUFHLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLFVBQUMsR0FBb0IsRUFBRSxHQUFxQjtRQUNwRSxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4QyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JCLENBQUMsQ0FBQyxDQUFBO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XHJcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xyXG5pbXBvcnQgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcclxuaW1wb3J0IG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKTtcclxuaW1wb3J0IGJvZHlQYXJzZXIgPSByZXF1aXJlKCdib2R5LXBhcnNlcicpOyBcclxuXHJcbm1vbmdvb3NlLmNvbm5lY3QoJ21vbmdvZGI6Ly9pdWxpX3VuZ3VyOnBhdHR5Y3V0OTRAZHMwMjU0MTkubWxhYi5jb206MjU0MTkvc2Fib3RvcicpO1xyXG5cclxudmFyIHBvcnQ6IG51bWJlciA9IHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMDtcclxudmFyIGFwcCA9IGV4cHJlc3MoKTtcclxudmFyIGRhdGFiYXNlID0gbW9uZ29vc2UuY29ubmVjdGlvbjtcclxuZGF0YWJhc2Uub24oJ2Vycm9yJywgY29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUsICdjb25uZWN0aW9uIGVycm9yOicpKTtcclxuXHJcbmRhdGFiYXNlLm9uY2UoJ29wZW4nLCBmdW5jdGlvbigpIHsgICAgXHJcbiAgICBjb25zb2xlLmxvZygnRGF0YWJhc2UgY29ubmVjdGlvbiBlc3RhYmxpc2hlZCcpO1xyXG4gICAgXHJcbiAgICB2YXIgdXNlclNjaGVtYSA9IG5ldyBtb25nb29zZS5TY2hlbWEoe1xyXG4gICAgICAgIHVzZXJOYW1lOiB7IHR5cGUgOiBTdHJpbmcgLCB1bmlxdWUgOiB0cnVlLCByZXF1aXJlZCA6IHRydWUgfSxcclxuICAgICAgICBwYXNzd29yZDogeyB0eXBlIDogU3RyaW5nICwgcmVxdWlyZWQgOiB0cnVlIH0sXHJcbiAgICAgICAgbmFtZTogeyB0eXBlIDogU3RyaW5nICwgcmVxdWlyZWQgOiB0cnVlIH0sXHJcbiAgICAgICAgYXV0aFRva2VuOiAgeyB0eXBlIDogU3RyaW5nIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICB2YXIgVXNlciA9IG1vbmdvb3NlLm1vZGVsKCdVc2VyJywgdXNlclNjaGVtYSk7XHJcbiAgICBcclxuICAgIGFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xyXG4gICAgYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoe2V4dGVuZGVkOiB0cnVlfSkpO1xyXG5cclxuICAgIC8vIFN0YXRpYyByb3V0ZXNcclxuICAgIGFwcC51c2UoJy9hcHAnLCBleHByZXNzLnN0YXRpYyhwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnYXBwJykpKTtcclxuICAgIGFwcC51c2UoJy9saWJzJywgZXhwcmVzcy5zdGF0aWMocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ2xpYnMnKSkpO1xyXG4gICAgYXBwLnVzZSgnL2ltYWdlcycsIGV4cHJlc3Muc3RhdGljKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICdpbWFnZXMnKSkpO1xyXG4gICAgYXBwLnVzZSgnL2NzcycsIGV4cHJlc3Muc3RhdGljKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICdjc3MnKSkpO1xyXG5cclxuICAgIC8vIFN0YXJ0IHNlcnZlclxyXG4gICAgdmFyIHNlcnZlciA9IGFwcC5saXN0ZW4ocG9ydCwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGhvc3QgPSBzZXJ2ZXIuYWRkcmVzcygpLmFkZHJlc3M7XHJcbiAgICAgICAgdmFyIHBvcnQgPSBzZXJ2ZXIuYWRkcmVzcygpLnBvcnQ7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1RoaXMgZXhwcmVzcyBhcHAgaXMgbGlzdGVuaW5nIG9uIHBvcnQ6JyArIHBvcnQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gRHluYW1pYyByb3V0ZXNcclxuICAgIGFwcC5nZXQoJy8qJywgIChyZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgcmVzLnNlbmRGaWxlKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUgLCAnaW5kZXguaHRtbCcpKTtcclxuICAgIH0pOyBcclxuICAgIFxyXG4gICAgZnVuY3Rpb24gZ3VpZEdlbmVyYXRvcigpIDogc3RyaW5nIHtcclxuICAgICAgICB2YXIgUzQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gKCgoMStNYXRoLnJhbmRvbSgpKSoweDEwMDAwKXwwKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDEpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIChTNCgpK1M0KCkrXCItXCIrUzQoKStcIi1cIitTNCgpK1wiLVwiK1M0KCkrXCItXCIrUzQoKStTNCgpK1M0KCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEF1dGhvcml6YXRpb24gU2VydmljZVxyXG5cclxuICAgIGFwcC5wb3N0KCcvYXBpL2F1dGhvcml6YXRpb24vcmVnaXN0ZXJVc2VyJywgIChyZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJSZWdpc3RlclVzZXI6IFwiKTtcclxuICAgICAgICBjb25zb2xlLmRpcihyZXEuYm9keSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIG5ld1VzZXIgPSBuZXcgVXNlcih7XHJcbiAgICAgICAgICAgIHVzZXJOYW1lOiByZXEuYm9keS51c2VyTmFtZSxcclxuICAgICAgICAgICAgcGFzc3dvcmQ6IHJlcS5ib2R5LnBhc3N3b3JkLFxyXG4gICAgICAgICAgICBuYW1lOiByZXEuYm9keS5uYW1lLFxyXG4gICAgICAgICAgICBhdXRoVG9rZW46IFwiXCJcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICBuZXdVc2VyLnNhdmUoZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICBpZihlcnIpIHtcclxuICAgICAgICAgICAgICAgIHJlcy5qc29uKHtlcnJvck1lc3NhZ2U6IGVycn0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzLmpzb24oe3N1Y2Nlc3M6IHRydWV9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgfSk7IFxyXG5cclxuICAgIGFwcC5wb3N0KCcvYXBpL2F1dGhvcml6YXRpb24vbG9naW4nLCAgKHJlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIkxvZ2luIHJlcXVlc3Q6IFwiLCByZXEuYm9keSk7XHJcbiAgICAgICAgdmFyIHVzZXIgPSB7fTtcclxuICAgICAgICBcclxuICAgICAgICBVc2VyLmZpbmRPbmUoXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHVzZXJOYW1lOiByZXEuYm9keS51c2VyTmFtZSwgXHJcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogcmVxLmJvZHkucGFzc3dvcmRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZnVuY3Rpb24oZXJyLCByYXcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTG9naW4gcmVxdWVzdDogZmluZE9uZSgpIFwiLCBlcnIsIHJhdyk7XHJcbiAgICAgICAgICAgICAgICBpZihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXMuanNvbih7ZXJyb3JNZXNzYWdlOiBlcnJ9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHJhdyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhd1snYXV0aFRva2VuJ10gPSBndWlkR2VuZXJhdG9yKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdy5zYXZlKGZ1bmN0aW9uKGVyciwgcmF3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMuanNvbih7ZXJyb3JNZXNzYWdlOiBlcnJ9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5qc29uKHthdXRoVG9rZW46IHJhd1snYXV0aFRva2VuJ119KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmpzb24oe2Vycm9yTWVzc2FnZTogXCJVc2VyIG9yIHBhc3N3b3JkIGludmFsaWQhXCJ9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfSk7IFxyXG4gICAgXHJcbiAgICBhcHAucG9zdCgnL2FwaS9hdXRob3JpemF0aW9uL2xvZ291dCcsICAocmVxOiBleHByZXNzLlJlcXVlc3QsIHJlczogZXhwcmVzcy5SZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiTG9nb3V0IHJlcXVlc3Q6IFwiLCByZXEuYm9keSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgVXNlci5maW5kT25lKFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBhdXRoVG9rZW46IHJlcS5ib2R5LmF1dGhUb2tlblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmdW5jdGlvbihlcnIsIHJhdykge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJMb2dvdXQgcmVxdWVzdDogZmluZE9uZSgpIFwiLCBlcnIsIHJhdyk7XHJcbiAgICAgICAgICAgICAgICBpZihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXMuanNvbih7ZXJyb3JNZXNzYWdlOiBlcnJ9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHJhdyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhd1snYXV0aFRva2VuJ10gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdy5zYXZlKGZ1bmN0aW9uKGVyciwgcmF3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMuanNvbih7ZXJyb3JNZXNzYWdlOiBlcnJ9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5qc29uKHtzdWNjZXNzOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5qc29uKHtlcnJvck1lc3NhZ2U6IFwiSW52YWxpZCBvciBleHBpcmVkIHRva2VuIVwifSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAgLy8gR2FtZUxvYmJ5U2VydmljZSBcclxuICAgICBcclxuICAgICBhcHAuZ2V0KCcvYXBpL2dhbWUtbG9iYnkvJywgKHJlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgY29uc29sZS5sb2coJ2dldCBnYW1lLWxvYmJ5JywgcmVxLmJvZHkpO1xyXG4gICAgICAgICBcclxuICAgICAgICAgcmVzLmpzb24oJ3Rlc3QnKTtcclxuICAgICB9KVxyXG59KTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
